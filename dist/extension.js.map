{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"",".././src/extension.ts",".././src/editor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","exportFunctions","editor","functionNames","document","getText","includes","exportsType","modulesEditor","getExportsType","addToExport","inlineAppendToExport","replaceSingleExport","listAppendToExport","newExportStatement","exportFunctionUnderCursor","vscode","window","activeTextEditor","functionName","selection","active","line","sourceLine","lineAt","text","startsWith","match","replace","trim","exportAllFunctions","lineCount","push","context","underCursor","commands","registerCommand","all","subscriptions","getExportsLineInText","resultIndex","resultText","exportsLine","exportsText","result","length","edit","editBuilder","lastLine","range","end","insert","join","start","Position","character","Range","alreadExportedFunctions","split","map","fn","filteredNames","forEach","endLine","alreadyExportedFunctions","exportedThing","filter"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\nimport * as modulesEditor from './editor';\n\nasync function exportFunctions(editor: vscode.TextEditor, functionNames: string[]) {\n\tconst text = editor.document.getText();\n\tif (!text.includes('module.exports')) { // module.exports doesn't exist in the file\n\t\tawait modulesEditor.newExportStatement(editor, functionNames);\n\t} else {\n\t\tconst exportsType = modulesEditor.getExportsType(editor.document);\n\n\t\tif (exportsType === 'empty') { // module.exports = { }; exists in the file \n\t\t\tawait modulesEditor.addToExport(editor, functionNames);\n\t\t} else if (exportsType === 'inline') { // module.exports = { someFunctionName }; exists in the file\n\t\t\tawait modulesEditor.inlineAppendToExport(editor, functionNames);\n\t\t} else if (exportsType === 'single') { // module.exports = somename; exists in the file\n\t\t\tawait modulesEditor.replaceSingleExport(editor, functionNames);\n\t\t} else if (exportsType === 'list') { // module.exports statement expands multiple lines\n\t\t\tawait modulesEditor.listAppendToExport(editor, functionNames);\n\t\t}\n\t}\n}\n\nexport function exportFunctionUnderCursor() {\n\tconst editor = vscode.window.activeTextEditor;\n\n\tif (editor) {\n\t\tlet line = editor.selection.active.line;\n\n\t\t// Figure out a function name under the cursor\n\t\tlet functionName = '';\n\t\tfor (let i = line; i >= 0; --i) {\n\t\t\tconst sourceLine = editor.document.lineAt(i).text;\n\t\t\tif (sourceLine && sourceLine.startsWith('function') || sourceLine.startsWith('async function')) {\n\t\t\t\tconst match = sourceLine.replace(/async|function/g, '').match(/^[^(]*/);\n\t\t\t\tif (match) {\n\t\t\t\t\tfunctionName = match[0].trim();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn exportFunctions(editor, [functionName]);\n\t}\n}\n\nexport function exportAllFunctions() {\n\tconst editor = vscode.window.activeTextEditor;\n\n\tif (editor) {\n\t\tconst document = editor.document;\n\t\tconst functionNames: string[] = [];\n\t\tfor (let i = 0; i < document.lineCount; ++i) {\n\t\t\tconst sourceLine = document.lineAt(i).text;\n\t\t\tif (sourceLine && sourceLine.startsWith('function') || sourceLine.startsWith('async function')) {\n\t\t\t\tconst match = sourceLine.replace(/async|function/g, '').match(/^[^(]*/);\n\t\t\t\tif (match) { functionNames.push(match[0].trim()); }\n\t\t\t}\n\t\t}\n\n\t\treturn exportFunctions(editor, functionNames);\n\t}\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n\tconst underCursor = vscode.commands.registerCommand('module-exports.exportFunctionUnderCursor', exportFunctionUnderCursor);\n\tconst all = vscode.commands.registerCommand('module-exports.exportAllFunctions', exportAllFunctions);\n\tcontext.subscriptions.push(underCursor);\n\tcontext.subscriptions.push(all);\n}\n\nexport function deactivate() { }","import * as vscode from 'vscode';\r\n\r\n// Get the line in the text where the module.exports resides\r\nfunction getExportsLineInText(document: vscode.TextDocument) {\r\n    let resultIndex = -1;\r\n    let resultText = '';\r\n    for (let i = document.lineCount - 1; i >= 0; --i) {\r\n        const sourceLine = document.lineAt(i).text;\r\n        if (sourceLine && sourceLine.includes('module.exports')) {\r\n            resultIndex = i;\r\n            resultText = sourceLine;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return { exportsLine: resultIndex, exportsText: resultText };\r\n}\r\n\r\n// Returns the type of the module.exports line.\r\n// Types are:\r\n//  empty -> module.exports = {};\r\n//  inline -> module.exports = { something, somethingElse };\r\n//  single -> module.exports = something;\r\n//  list -> module.exports = {\r\n//      something,\r\n//      somethingElse,\r\n//  }; \r\nfunction getExportsType(document: vscode.TextDocument) {\r\n    let result = '';\r\n    for (let i = document.lineCount - 1; i >= 0; --i) {\r\n        const sourceLine = document.lineAt(i).text;\r\n        if (sourceLine && sourceLine.includes('module.exports')) {\r\n            if (sourceLine.replace(/\\s/g, '').includes('{}')) {\r\n                result = 'empty';\r\n            } else if (sourceLine.includes('}')) {\r\n                result = 'inline';\r\n            } else if (!sourceLine.includes('{') && !sourceLine.includes('}')) {\r\n                result = 'single';\r\n            } else if (!sourceLine.includes('}')) {\r\n                result = 'list';\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n// Should be used when module.exports does not exist in the file\r\nfunction newExportStatement(editor: vscode.TextEditor, functionNames: string[]) {\r\n    if (!functionNames || functionNames.length === 0) { return; }\r\n\r\n    const document = editor.document;\r\n    return editor.edit(editBuilder => {\r\n        const lastLine = document.lineAt(document.lineCount - 1).range.end;\r\n        editBuilder.insert(lastLine, `\\n\\nmodule.exports = { ${functionNames.join(', ')} };`);\r\n    });\r\n}\r\n\r\n// Should be used when module.exports = { }; exists in the file, but nothing is expoorted yet\r\nfunction addToExport(editor: vscode.TextEditor, functionNames: string[]) {\r\n    if (!functionNames || functionNames.length === 0) { return; }\r\n\r\n    const document = editor.document;\r\n    const { exportsLine } = getExportsLineInText(document);\r\n    return editor.edit(editBuilder => {\r\n        const start = new vscode.Position(exportsLine, document.lineAt(exportsLine).range.end.character - 2);\r\n        const end = new vscode.Position(exportsLine, document.lineAt(exportsLine).range.end.character);\r\n\r\n        editBuilder.replace(new vscode.Range(start, end), `${functionNames.join(', ')} };`);\r\n    });\r\n}\r\n\r\nfunction inlineAppendToExport(editor: vscode.TextEditor, functionNames: string[]) {\r\n    if (!functionNames || functionNames.length === 0) { return; }\r\n\r\n    const document = editor.document;\r\n    const { exportsLine, exportsText } = getExportsLineInText(document);\r\n\r\n    // Possible optimization: go over the string one time symbol by symbol instead of a chain of methods that each go over a string\r\n    const alreadExportedFunctions = exportsText.replace(/\\s+/g, '').replace(/^module.exports={/, '').replace(/[};]/g, '').split(',').map(fn => fn.trim());\r\n    const filteredNames: string[] = [];\r\n    functionNames.forEach(name => {\r\n        if (!alreadExportedFunctions.includes(name)) {\r\n            filteredNames.push(name);\r\n        }\r\n    });\r\n\r\n    if (filteredNames.length > 0) {\r\n        return editor.edit(editBuilder => {\r\n            const start = new vscode.Position(exportsLine, document.lineAt(exportsLine).range.end.character - 3);\r\n            const end = new vscode.Position(exportsLine, document.lineAt(exportsLine).range.end.character);\r\n\r\n            editBuilder.replace(new vscode.Range(start, end), `, ${filteredNames.join(', ')} };`);\r\n        });\r\n    }\r\n}\r\n\r\nfunction listAppendToExport(editor: vscode.TextEditor, functionNames: string[]) {\r\n    if (!functionNames || functionNames.length === 0) { return; }\r\n\r\n    const document = editor.document;\r\n    const { exportsLine } = getExportsLineInText(document);\r\n\r\n    // Find the end of the module.exports statement\r\n    let endLine = -1;\r\n    const alreadyExportedFunctions: string[] = [];\r\n    for (let i = exportsLine; i < document.lineCount; ++i) {\r\n        const sourceLine = document.lineAt(i).text;\r\n        if (sourceLine && sourceLine.includes('}')) {\r\n            endLine = i;\r\n            break;\r\n        } else { alreadyExportedFunctions.push(sourceLine.replace(/,/g, '').trim()); }\r\n    }\r\n\r\n    const filteredNames: string[] = [];\r\n    functionNames.forEach(name => {\r\n        if (!alreadyExportedFunctions.includes(name)) {\r\n            filteredNames.push(name);\r\n        }\r\n    });\r\n\r\n    if (filteredNames.length > 0) {\r\n        return editor.edit(editBuilder => {\r\n            // If the last export doesn't contain a comma, we should add one\r\n            if (!document.lineAt(endLine - 1).text.includes(',')) {\r\n                const start = new vscode.Position(endLine - 1, document.lineAt(endLine - 1).range.end.character);\r\n                editBuilder.replace(start, ',');\r\n            }\r\n\r\n            const start = new vscode.Position(endLine, document.lineAt(endLine).range.end.character - 2);\r\n            const end = new vscode.Position(endLine, document.lineAt(endLine).range.end.character);\r\n\r\n            editBuilder.replace(new vscode.Range(start, end), `\\t${filteredNames.join(',\\n\\t')},\\n};`);\r\n        });\r\n    }\r\n}\r\n\r\nfunction replaceSingleExport(editor: vscode.TextEditor, functionNames: string[]) {\r\n    if (!functionNames || functionNames.length === 0) { return; }\r\n\r\n    const document = editor.document;\r\n    const { exportsLine, exportsText } = getExportsLineInText(document);\r\n\r\n    const match = exportsText.replace(';', '').match(/[^=]*$/);\r\n    if (match) {\r\n        const exportedThing = match[0].trim();\r\n        const filteredNames = functionNames.filter(name => name !== exportedThing);\r\n\r\n        if (filteredNames.length > 0) {\r\n            return editor.edit(editBuilder => {\r\n                const start = document.lineAt(exportsLine).range.start;\r\n                const end = document.lineAt(exportsLine).range.end;\r\n\r\n                editBuilder.replace(new vscode.Range(start, end), `module.exports = { ${exportedThing}, ${filteredNames.join(', ')} };`);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    getExportsType,\r\n    newExportStatement,\r\n    addToExport,\r\n    inlineAppendToExport,\r\n    listAppendToExport,\r\n    replaceSingleExport,\r\n};"],"sourceRoot":""}