{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"",".././src/extension.ts",".././src/editor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","getFunctionUnderCursor","editor","selection","active","line","sourceLine","document","lineAt","text","startsWith","match","replace","trim","exportFunctions","functionNames","getText","includes","exportsType","modulesEditor","getExportsType","addToExport","inlineAppendToExport","replaceSingleExport","listAppendToExport","newExportStatement","clearAllExports","vscode","window","activeTextEditor","clearExports","exportFunctionUnderCursorExclusive","functionName","replaceExport","exportFunctionExclusive","exportFunctionUnderCursor","exportAllFunctions","lineCount","push","length","context","underCursor","commands","registerCommand","all","exclusive","clear","subscriptions","replaceModuleExports","replaceWith","exportsLine","getExportsLineInText","start","range","end","edit","editBuilder","Range","resultIndex","resultText","exportsText","result","lastLine","lineToInsert","join","insert","Position","character","alreadExportedFunctions","split","map","fn","filteredNames","forEach","endLine","alreadyExportedFunctions","exportedThing","filter"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\r\nimport * as modulesEditor from './editor';\r\n\r\nfunction getFunctionUnderCursor(editor: vscode.TextEditor) {\r\n\tlet line = editor.selection.active.line;\r\n\r\n\tfor (let i = line; i >= 0; --i) {\r\n\t\tconst sourceLine = editor.document.lineAt(i).text;\r\n\t\tif (sourceLine && sourceLine.startsWith('function') || sourceLine.startsWith('async function')) {\r\n\t\t\tconst match = sourceLine.replace(/async|function/g, '').match(/^[^(]*/);\r\n\t\t\tif (match) { return match[0].trim(); }\r\n\t\t}\r\n\t}\r\n\r\n\treturn '';\r\n}\r\n\r\nasync function exportFunctions(editor: vscode.TextEditor, functionNames: string[]) {\r\n\tconst text = editor.document.getText();\r\n\tif (!text.includes('module.exports')) { // module.exports doesn't exist in the file\r\n\t\tawait modulesEditor.newExportStatement(editor, functionNames);\r\n\t} else {\r\n\t\tconst exportsType = modulesEditor.getExportsType(editor.document);\r\n\r\n\t\tif (exportsType === 'empty') { // module.exports = { }; exists in the file \r\n\t\t\tawait modulesEditor.addToExport(editor, functionNames);\r\n\t\t} else if (exportsType === 'inline') { // module.exports = { someFunctionName }; exists in the file\r\n\t\t\tawait modulesEditor.inlineAppendToExport(editor, functionNames);\r\n\t\t} else if (exportsType === 'single') { // module.exports = somename; exists in the file\r\n\t\t\tawait modulesEditor.replaceSingleExport(editor, functionNames);\r\n\t\t} else if (exportsType === 'list') { // module.exports statement expands multiple lines\r\n\t\t\tawait modulesEditor.listAppendToExport(editor, functionNames);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nasync function exportFunctionExclusive(editor: vscode.TextEditor, functionName: string) {\r\n\tconst text = editor.document.getText();\r\n\tif (!text.includes('module.exports')) {\r\n\t\tawait modulesEditor.newExportStatement(editor, [functionName], true);\r\n\t} else {\r\n\t\tawait modulesEditor.replaceExport(editor, functionName);\r\n\t}\r\n}\r\n\r\nexport function clearAllExports() {\r\n\tconst editor = vscode.window.activeTextEditor;\r\n\r\n\tif (editor) {\r\n\t\tconst text = editor.document.getText();\r\n\t\tif (text.includes('module.exports')) {\r\n\t\t\treturn modulesEditor.clearExports(editor);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function exportFunctionUnderCursorExclusive() {\r\n\tconst editor = vscode.window.activeTextEditor;\r\n\r\n\tif (editor) {\r\n\t\tconst functionName = getFunctionUnderCursor(editor);\r\n\t\treturn functionName !== '' ? exportFunctionExclusive(editor, functionName) : null;\r\n\t}\r\n}\r\n\r\nexport function exportFunctionUnderCursor() {\r\n\tconst editor = vscode.window.activeTextEditor;\r\n\r\n\tif (editor) {\r\n\t\tconst functionName = getFunctionUnderCursor(editor);\r\n\t\treturn functionName !== '' ? exportFunctions(editor, [functionName]) : null;\r\n\t}\r\n}\r\n\r\nexport function exportAllFunctions() {\r\n\tconst editor = vscode.window.activeTextEditor;\r\n\r\n\tif (editor) {\r\n\t\tconst document = editor.document;\r\n\t\tconst functionNames: string[] = [];\r\n\t\tfor (let i = 0; i < document.lineCount; ++i) {\r\n\t\t\tconst sourceLine = document.lineAt(i).text;\r\n\t\t\tif (sourceLine && sourceLine.startsWith('function') || sourceLine.startsWith('async function')) {\r\n\t\t\t\tconst match = sourceLine.replace(/async|function/g, '').match(/^[^(]*/);\r\n\t\t\t\tif (match) { functionNames.push(match[0].trim()); }\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn functionNames.length > 0 ? exportFunctions(editor, functionNames) : null;\r\n\t}\r\n}\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\tconst underCursor = vscode.commands.registerCommand('module-exports.exportFunctionUnderCursor', exportFunctionUnderCursor);\r\n\tconst all = vscode.commands.registerCommand('module-exports.exportAllFunctions', exportAllFunctions);\r\n\tconst exclusive = vscode.commands.registerCommand('module-exports.exportFunctionUnderCursorExclusive', exportFunctionUnderCursorExclusive);\r\n\tconst clear = vscode.commands.registerCommand('module-exports.clearAllExports', clearAllExports);\r\n\tcontext.subscriptions.push(underCursor);\r\n\tcontext.subscriptions.push(all);\r\n\tcontext.subscriptions.push(exclusive);\r\n\tcontext.subscriptions.push(clear);\r\n}\r\n\r\nexport function deactivate() {\r\n\r\n}","import * as vscode from 'vscode';\r\n\r\nfunction replaceModuleExports(editor: vscode.TextEditor, replaceWith: string) {\r\n    const document = editor.document;\r\n    const { exportsLine } = getExportsLineInText(document);\r\n\r\n    const start = document.lineAt(exportsLine).range.start;\r\n    const end = document.lineAt(document.lineCount - 1).range.end;\r\n\r\n    return editor.edit(editBuilder => {\r\n        editBuilder.replace(new vscode.Range(start, end), replaceWith);\r\n    });\r\n}\r\n\r\n// Get the line in the text where the module.exports resides\r\nfunction getExportsLineInText(document: vscode.TextDocument) {\r\n    let resultIndex = -1;\r\n    let resultText = '';\r\n    for (let i = document.lineCount - 1; i >= 0; --i) {\r\n        const sourceLine = document.lineAt(i).text;\r\n        if (sourceLine && sourceLine.includes('module.exports')) {\r\n            resultIndex = i;\r\n            resultText = sourceLine;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return { exportsLine: resultIndex, exportsText: resultText };\r\n}\r\n\r\n// Returns the type of the module.exports line.\r\n// Types are:\r\n//  empty -> module.exports = {};\r\n//  inline -> module.exports = { something, somethingElse };\r\n//  single -> module.exports = something;\r\n//  list -> module.exports = {\r\n//      something,\r\n//      somethingElse,\r\n//  }; \r\nfunction getExportsType(document: vscode.TextDocument) {\r\n    let result = '';\r\n    for (let i = document.lineCount - 1; i >= 0; --i) {\r\n        const sourceLine = document.lineAt(i).text;\r\n        if (sourceLine && sourceLine.includes('module.exports')) {\r\n            if (sourceLine.replace(/\\s/g, '').includes('{}')) {\r\n                result = 'empty';\r\n            } else if (sourceLine.includes('}')) {\r\n                result = 'inline';\r\n            } else if (!sourceLine.includes('{') && !sourceLine.includes('}')) {\r\n                result = 'single';\r\n            } else if (!sourceLine.includes('}')) {\r\n                result = 'list';\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n// Should be used when module.exports does not exist in the file\r\nfunction newExportStatement(editor: vscode.TextEditor, functionNames: string[], exclusive = false) {\r\n    if (!functionNames || functionNames.length === 0) { return; }\r\n\r\n    const document = editor.document;\r\n    return editor.edit(editBuilder => {\r\n        const lastLine = document.lineAt(document.lineCount - 1).range.end;\r\n        let lineToInsert = '';\r\n        if (exclusive && functionNames.length === 1) {\r\n            lineToInsert = `\\n\\nmodule.exports = ${functionNames[0]};`;\r\n        } else {\r\n            lineToInsert = `\\n\\nmodule.exports = { ${functionNames.join(', ')} };`;\r\n        }\r\n\r\n        editBuilder.insert(lastLine, lineToInsert);\r\n    });\r\n}\r\n\r\n// Should be used when module.exports = { }; exists in the file, but nothing is expoorted yet\r\nfunction addToExport(editor: vscode.TextEditor, functionNames: string[]) {\r\n    if (!functionNames || functionNames.length === 0) { return; }\r\n\r\n    const document = editor.document;\r\n    const { exportsLine } = getExportsLineInText(document);\r\n    return editor.edit(editBuilder => {\r\n        const start = new vscode.Position(exportsLine, document.lineAt(exportsLine).range.end.character - 2);\r\n        const end = new vscode.Position(exportsLine, document.lineAt(exportsLine).range.end.character);\r\n\r\n        editBuilder.replace(new vscode.Range(start, end), `${functionNames.join(', ')} };`);\r\n    });\r\n}\r\n\r\nfunction inlineAppendToExport(editor: vscode.TextEditor, functionNames: string[]) {\r\n    if (!functionNames || functionNames.length === 0) { return; }\r\n\r\n    const document = editor.document;\r\n    const { exportsLine, exportsText } = getExportsLineInText(document);\r\n\r\n    // Possible optimization: go over the string one time symbol by symbol instead of a chain of methods that each go over a string\r\n    const alreadExportedFunctions = exportsText.replace(/\\s+/g, '').replace(/^module.exports={/, '').replace(/[};]/g, '').split(',').map(fn => fn.trim());\r\n    const filteredNames: string[] = [];\r\n    functionNames.forEach(name => {\r\n        if (!alreadExportedFunctions.includes(name)) {\r\n            filteredNames.push(name);\r\n        }\r\n    });\r\n\r\n    if (filteredNames.length > 0) {\r\n        return editor.edit(editBuilder => {\r\n            const start = new vscode.Position(exportsLine, document.lineAt(exportsLine).range.end.character - 3);\r\n            const end = new vscode.Position(exportsLine, document.lineAt(exportsLine).range.end.character);\r\n\r\n            editBuilder.replace(new vscode.Range(start, end), `, ${filteredNames.join(', ')} };`);\r\n        });\r\n    }\r\n}\r\n\r\nfunction listAppendToExport(editor: vscode.TextEditor, functionNames: string[]) {\r\n    if (!functionNames || functionNames.length === 0) { return; }\r\n\r\n    const document = editor.document;\r\n    const { exportsLine } = getExportsLineInText(document);\r\n\r\n    // Find the end of the module.exports statement\r\n    let endLine = -1;\r\n    const alreadyExportedFunctions: string[] = [];\r\n    for (let i = exportsLine; i < document.lineCount; ++i) {\r\n        const sourceLine = document.lineAt(i).text;\r\n        if (sourceLine && sourceLine.includes('}')) {\r\n            endLine = i;\r\n            break;\r\n        } else { alreadyExportedFunctions.push(sourceLine.replace(/,/g, '').trim()); }\r\n    }\r\n\r\n    const filteredNames: string[] = [];\r\n    functionNames.forEach(name => {\r\n        if (!alreadyExportedFunctions.includes(name)) {\r\n            filteredNames.push(name);\r\n        }\r\n    });\r\n\r\n    if (filteredNames.length > 0) {\r\n        return editor.edit(editBuilder => {\r\n            // If the last export doesn't contain a comma, we should add one\r\n            if (!document.lineAt(endLine - 1).text.includes(',')) {\r\n                const start = new vscode.Position(endLine - 1, document.lineAt(endLine - 1).range.end.character);\r\n                editBuilder.replace(start, ',');\r\n            }\r\n\r\n            const start = new vscode.Position(endLine, document.lineAt(endLine).range.end.character - 2);\r\n            const end = new vscode.Position(endLine, document.lineAt(endLine).range.end.character);\r\n\r\n            editBuilder.replace(new vscode.Range(start, end), `\\t${filteredNames.join(',\\n\\t')},\\n};`);\r\n        });\r\n    }\r\n}\r\n\r\nfunction replaceSingleExport(editor: vscode.TextEditor, functionNames: string[]) {\r\n    if (!functionNames || functionNames.length === 0) { return; }\r\n\r\n    const document = editor.document;\r\n    const { exportsLine, exportsText } = getExportsLineInText(document);\r\n\r\n    const match = exportsText.replace(';', '').match(/[^=]*$/);\r\n    if (match) {\r\n        const exportedThing = match[0].trim();\r\n        const filteredNames = functionNames.filter(name => name !== exportedThing);\r\n\r\n        if (filteredNames.length > 0) {\r\n            return editor.edit(editBuilder => {\r\n                const start = document.lineAt(exportsLine).range.start;\r\n                const end = document.lineAt(exportsLine).range.end;\r\n\r\n                editBuilder.replace(new vscode.Range(start, end), `module.exports = { ${exportedThing}, ${filteredNames.join(', ')} };`);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nfunction replaceExport(editor: vscode.TextEditor, functionName: string) {\r\n    if (!functionName) { return; }\r\n    return replaceModuleExports(editor, `module.exports = ${functionName};`);\r\n}\r\n\r\nfunction clearExports(editor: vscode.TextEditor) {\r\n    return replaceModuleExports(editor, '');\r\n}\r\n\r\nexport {\r\n    getExportsType,\r\n    newExportStatement,\r\n    addToExport,\r\n    inlineAppendToExport,\r\n    listAppendToExport,\r\n    replaceSingleExport,\r\n    replaceExport,\r\n    clearExports,\r\n};"],"sourceRoot":""}